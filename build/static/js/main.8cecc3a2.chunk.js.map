{"version":3,"sources":["img/cir-blue.png","img/cir-red.png","img/cir-green.png","img/cir-grey.png","components/GMap.js","components/Map.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","GMap","googleMapRef","useRef","googleMap","iconList","icon1","cgreen","icon2","cblue","icon3","cred","icon4","cgrey","markerList","lat","lng","icon","useEffect","initGoogleMap","bounds","window","google","maps","LatLngBounds","map","x","marker","createMarker","extend","position","fitBounds","Map","current","center","zoom","markerObj","Marker","url","scaledSize","Size","ref","style","width","height","App","useState","loadMap","setLoadMap","callback","googleMapScript","document","createElement","src","body","appendChild","addEventListener","loadGoogleMapScript","className","Component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kFAAAA,EAAOC,QAAU,IAA0B,sC,gBCA3CD,EAAOC,QAAU,IAA0B,qC,gBCA3CD,EAAOC,QAAU,IAA0B,uC,gBCA3CD,EAAOC,QAAU,IAA0B,sC,qNCgE5BC,EAzDF,WACT,IAAMC,EAAeC,iBAAO,MACxBC,EAAY,KAGVC,EAAW,CACbC,MAAOC,IACPC,MAAOC,IACPC,MAAOC,IACPC,MAAOC,KAILC,EAAa,CACf,CAAEC,IAAK,SAAUC,IAAK,WAAYC,KAAMZ,EAASC,OACjD,CAAES,IAAK,SAAUC,IAAK,WAAYC,KAAMZ,EAASG,OACjD,CAAEO,IAAK,SAAUC,IAAK,WAAYC,KAAMZ,EAASK,OACjD,CAAEK,IAAK,SAAUC,IAAK,WAAYC,KAAMZ,EAASO,QAIrDM,qBAAU,WACNd,EAAYe,IACZ,IAAIC,EAAS,IAAIC,OAAOC,OAAOC,KAAKC,aACpCV,EAAWW,KAAI,SAAAC,GACX,IAAMC,EAASC,EAAaF,GAC5BN,EAAOS,OAAOF,EAAOG,aAEzB1B,EAAU2B,UAAUX,KACrB,IAIH,IAAMD,EAAgB,WAClB,OAAO,IAAIE,OAAOC,OAAOC,KAAKS,IAAI9B,EAAa+B,QAAS,CACpDC,OAAQ,CAAEnB,IAAK,SAAUC,IAAK,YAC9BmB,KAAM,MAKRP,EAAe,SAACQ,GAAD,OAAe,IAAIf,OAAOC,OAAOC,KAAKc,OAAO,CAC9DP,SAAU,CAAEf,IAAKqB,EAAUrB,IAAKC,IAAKoB,EAAUpB,KAC/CS,IAAKrB,EACLa,KAAM,CACFqB,IAAKF,EAAUnB,KAEfsB,WAAY,IAAIlB,OAAOC,OAAOC,KAAKiB,KAAK,GAAI,QAIpD,OAAO,yBACHC,IAAKvC,EACLwC,MAAO,CAAEC,MAAO,IAAKC,OAAQ,QCzBtBC,EAjBH,WAAO,IAAD,EACgBC,oBAAS,GADzB,mBACPC,EADO,KACEC,EADF,KASd,OANA9B,qBAAU,YAdc,SAAC+B,GACzB,GAA6B,kBAAlB5B,OAAOC,QAAqD,kBAAvBD,OAAOC,OAAOC,KAC1D0B,QACG,CACH,IAAMC,EAAkBC,SAASC,cAAc,UAC/CF,EAAgBG,IAAhB,sDARmB,2CASnBhC,OAAO8B,SAASG,KAAKC,YAAYL,GACjCA,EAAgBM,iBAAiB,OAAQP,IAQzCQ,EAAoB,WAChBT,GAAW,QAEhB,IAGC,yBAAKU,UAAU,OACX,yDAAkC,6BAAM,6BACtCX,EAAkC,kBAAC,EAAD,MAAxB,6CCfTF,EAXf,uKAEI,OACE,6BACE,kBAACb,EAAD,WAJR,GAAyB2B,aCQLC,QACW,cAA7BvC,OAAOwC,SAASC,UAEe,UAA7BzC,OAAOwC,SAASC,UAEhBzC,OAAOwC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFf,SAASgB,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.8cecc3a2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/cir-blue.9a703f7d.png\";","module.exports = __webpack_public_path__ + \"static/media/cir-red.a68da5f5.png\";","module.exports = __webpack_public_path__ + \"static/media/cir-green.c42072ab.png\";","module.exports = __webpack_public_path__ + \"static/media/cir-grey.7382ed94.png\";","import React, { useEffect, useRef } from 'react';\n\nimport cblue from '../img/cir-blue.png';\nimport cred from '../img/cir-red.png';\nimport cgreen from '../img/cir-green.png';\nimport cgrey from '../img/cir-grey.png';\n\nconst GMap = () => {\n    const googleMapRef = useRef(null);\n    let googleMap = null;\n\n    // list of icons\n    const iconList = {\n        icon1: cgreen,\n        icon2: cblue,\n        icon3: cred,\n        icon4: cgrey\n    }\n\n    // list of the marker object along with icon\n    const markerList = [\n        { lat: 1.014682, lng: 104.469791, icon: iconList.icon1 },\n        { lat: 1.134982, lng: 104.369481, icon: iconList.icon2 },\n        { lat: 1.114582, lng: 104.569081, icon: iconList.icon3 },\n        { lat: 1.134622, lng: 104.519771, icon: iconList.icon4 },\n\n    ]\n\n    useEffect(() => {\n        googleMap = initGoogleMap();\n        var bounds = new window.google.maps.LatLngBounds();\n        markerList.map(x => {\n            const marker = createMarker(x);\n            bounds.extend(marker.position);\n        });\n        googleMap.fitBounds(bounds); // the map to contain all markers\n    }, []);\n\n\n    // initialize the google map\n    const initGoogleMap = () => {\n        return new window.google.maps.Map(googleMapRef.current, {\n            center: { lat: 1.014682, lng: 104.469781 },\n            zoom: 10\n        });\n    }\n\n    // create marker on google map\n    const createMarker = (markerObj) => new window.google.maps.Marker({\n        position: { lat: markerObj.lat, lng: markerObj.lng },\n        map: googleMap,\n        icon: {\n            url: markerObj.icon,\n            // set marker width and height\n            scaledSize: new window.google.maps.Size(50, 50)\n        }\n    });\n\n    return <div\n        ref={googleMapRef}\n        style={{ width: 800, height: 500 }}\n    />\n}\n\nexport default GMap;","import React, { useState, useEffect } from 'react';\nimport GMap from './GMap';\n\n// API key of the google map\nconst GOOGLE_MAP_API_KEY = 'AIzaSyBOeHuAzdy0K8kaHyaoI8zRxIo6HAqp9Tk';\n\n// load google map script\nconst loadGoogleMapScript = (callback) => {\n    if (typeof window.google === 'object' && typeof window.google.maps === 'object') {\n        callback();\n    } else {\n        const googleMapScript = document.createElement(\"script\");\n        googleMapScript.src = `https://maps.googleapis.com/maps/api/js?key=${GOOGLE_MAP_API_KEY}`;\n        window.document.body.appendChild(googleMapScript);\n        googleMapScript.addEventListener(\"load\", callback);\n    }\n}\n\nconst App = () => {\n    const [loadMap, setLoadMap] = useState(false);\n\n    useEffect(() => {\n        loadGoogleMapScript(() => {\n            setLoadMap(true)\n        });\n    }, []);\n\n    return (\n        <div className=\"App\">\n            <h2>Corona Data Center Bintan</h2><br /><br />\n            {!loadMap ? <div>Loading...</div> : <GMap />}\n        </div>\n    );\n}\n\nexport default App;","import React, { Component } from 'react'\nimport MapContainer from './components/Map'\n\n\nexport class App extends Component {\n  render() {\n    return (\n      <div>\n        <MapContainer />\n\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}